{"version":3,"sources":["components/UserCard.js","components/GoogleLogin.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","props","user","name","src","profileImg","alt","GoogleLogin","useState","setUser","useEffect","setAuth2","loadAuth2","gapi","process","auth2","isSignedIn","get","updateUser","currentUser","attachSignin","document","getElementById","getBasicProfile","getName","getImageUrl","element","attachClickHandler","googleUser","error","console","log","JSON","stringify","className","id","onClick","getAuthInstance","signOut","then","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAEaA,EAAW,SAACC,GACvB,OACE,gCACE,6BAAKA,EAAMC,KAAKC,OAChB,qBAAKC,IAAKH,EAAMC,KAAKG,WAAYC,IAAI,mBAG1C,ECHYC,G,MAAc,WACzB,MAAwBC,mBAAS,MAAjC,mBAAON,EAAP,KAAaO,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAQ,iDAAG,8GACKC,YAClBC,IACAC,2EACA,IAJa,QACTC,EADS,QAMLC,WAAWC,MACnBC,EAAWH,EAAMI,YAAYF,OAE7BG,EAAaC,SAASC,eAAe,aAAcP,GATtC,2CAAH,qDAYdJ,GACD,GAAE,IAEHD,qBAAU,WACR,IAAKR,EAAM,CACT,IAAMS,EAAQ,iDAAG,8GACKC,YAClBC,IACAC,2EACA,IAJa,OACTC,EADS,OAMfK,EAAaC,SAASC,eAAe,aAAcP,GANpC,2CAAH,qDAQdJ,GACD,CACF,GAAE,CAACT,IAEJ,IAAMgB,EAAa,SAACC,GAClB,IAAMhB,EAAOgB,EAAYI,kBAAkBC,UACrCnB,EAAac,EAAYI,kBAAkBE,cACjDhB,EAAQ,CACNN,KAAMA,EACNE,WAAYA,GAEf,EAEKe,EAAe,SAACM,EAASX,GAC7BA,EAAMY,mBACJD,EACA,CAAC,GACD,SAACE,GACCV,EAAWU,EACZ,IACD,SAACC,GACCC,QAAQC,IAAIC,KAAKC,UAAUJ,GAC5B,GAEJ,EAUD,OAAI3B,EAEA,sBAAKgC,UAAU,YAAf,UACE,cAAC,EAAD,CAAUhC,KAAMA,IAChB,qBAAKiC,GAAG,GAAGD,UAAU,aAAaE,QAZxB,WACAvB,IAAKE,MAAMsB,kBACnBC,UAAUC,MAAK,WACnB9B,EAAQ,MACRqB,QAAQC,IAAI,mBACb,GACF,EAMK,uBAQJ,qBAAKG,UAAU,YAAf,SACE,qBAAKC,GAAG,YAAYD,UAAU,YAA9B,oBAKL,G,MC1EcM,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,KAGL,ECCmBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMX,MAAK,SAAAY,GACjCA,EAAaC,YACd,G","file":"static/js/main.f9acf0af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const UserCard = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>{props.user.name}</h2>\r\n      <img src={props.user.profileImg} alt=\"user profile\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { gapi, loadAuth2 } from 'gapi-script'\r\n\r\nimport { UserCard } from './UserCard'\r\nimport './GoogleLogin.css'\r\n\r\nexport const GoogleLogin = () => {\r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const setAuth2 = async () => {\r\n      const auth2 = await loadAuth2(\r\n        gapi,\r\n        process.env.REACT_APP_GOOGLE_CLIENT_ID,\r\n        ''\r\n      )\r\n      if (auth2.isSignedIn.get()) {\r\n        updateUser(auth2.currentUser.get())\r\n      } else {\r\n        attachSignin(document.getElementById('customBtn'), auth2)\r\n      }\r\n    }\r\n    setAuth2()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      const setAuth2 = async () => {\r\n        const auth2 = await loadAuth2(\r\n          gapi,\r\n          process.env.REACT_APP_GOOGLE_CLIENT_ID,\r\n          ''\r\n        )\r\n        attachSignin(document.getElementById('customBtn'), auth2)\r\n      }\r\n      setAuth2()\r\n    }\r\n  }, [user])\r\n\r\n  const updateUser = (currentUser) => {\r\n    const name = currentUser.getBasicProfile().getName()\r\n    const profileImg = currentUser.getBasicProfile().getImageUrl()\r\n    setUser({\r\n      name: name,\r\n      profileImg: profileImg,\r\n    })\r\n  }\r\n\r\n  const attachSignin = (element, auth2) => {\r\n    auth2.attachClickHandler(\r\n      element,\r\n      {},\r\n      (googleUser) => {\r\n        updateUser(googleUser)\r\n      },\r\n      (error) => {\r\n        console.log(JSON.stringify(error))\r\n      }\r\n    )\r\n  }\r\n\r\n  const signOut = () => {\r\n    const auth2 = gapi.auth2.getAuthInstance()\r\n    auth2.signOut().then(() => {\r\n      setUser(null)\r\n      console.log('User signed out.')\r\n    })\r\n  }\r\n\r\n  if (user) {\r\n    return (\r\n      <div className=\"container\">\r\n        <UserCard user={user} />\r\n        <div id=\"\" className=\"btn logout\" onClick={signOut}>\r\n          Logout\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"customBtn\" className=\"btn login\">\r\n        Login\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { GoogleLogin } from './components/GoogleLogin';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GoogleLogin />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}