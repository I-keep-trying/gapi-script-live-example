{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Userfront","init","SignupForm","build","toolId","LoginForm","PasswordResetForm","App","to","path","Login","PasswordReset","Dashboard","Home","render","location","accessToken","pathname","state","from","userData","JSON","stringify","user","console","log","onClick","logout","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAUAA,IAAUC,KAAK,YAEf,IAAMC,EAAaF,IAAUG,MAAM,CACjCC,OAAQ,WAEJC,EAAYL,IAAUG,MAAM,CAChCC,OAAQ,WAEJE,EAAoBN,IAAUG,MAAM,CACxCC,OAAQ,WAGK,SAASG,IACtB,OACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,aAAT,8BAKN,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,cAACE,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,aAAZ,SACE,cAACG,EAAD,MAEF,cAAC,IAAD,CAAOH,KAAK,IAAZ,SACE,cAACI,EAAD,aAMX,CAED,SAASA,IACP,OACE,gCACE,sCACA,cAACX,EAAD,MAGL,CAED,SAASQ,IACP,OACE,gCACE,uCACA,cAACL,EAAD,MAGL,CAED,SAASM,IACP,OACE,gCACE,gDACA,cAACL,EAAD,MAGL,CAED,SAASM,IA0BP,OAAO,cAAC,IAAD,CAAOE,OAzBd,YAAiC,IAAbC,EAAY,EAAZA,SAElB,IAAKf,IAAUgB,cACb,OACE,cAAC,IAAD,CACER,GAAI,CACFS,SAAU,SACVC,MAAO,CAAEC,KAAMJ,MAOvB,IAAMK,EAAWC,KAAKC,UAAUtB,IAAUuB,KAAM,KAAM,GAEtD,OADAC,QAAQC,IAAI,WAAWzB,KAErB,gCACE,2CACA,8BAAMoB,IACN,wBAAQM,QAAS1B,IAAU2B,OAA3B,sBAGL,GAGF,CCxGmBC,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASlB,OAAO,cAACP,EAAD,IAAS0B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,YACd,G","file":"static/js/main.bbbd7cf1.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport Userfront from \"@userfront/react\";\n\nUserfront.init(\"demo1234\");\n\nconst SignupForm = Userfront.build({\n  toolId: \"nkmbbm\",\n});\nconst LoginForm = Userfront.build({\n  toolId: \"alnkkd\",\n});\nconst PasswordResetForm = Userfront.build({\n  toolId: \"dkbmmo\",\n});\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/reset\">Reset</Link>\n            </li>\n            <li>\n              <Link to=\"/dashboard\">Dashboard</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/reset\">\n            <PasswordReset />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n      <SignupForm />\n    </div>\n  );\n}\n\nfunction Login() {\n  return (\n    <div>\n      <h2>Login</h2>\n      <LoginForm />\n    </div>\n  );\n}\n\nfunction PasswordReset() {\n  return (\n    <div>\n      <h2>Password Reset</h2>\n      <PasswordResetForm />\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  function renderFn({ location }) {\n    // If the user is not logged in, redirect to login\n    if (!Userfront.accessToken()) {\n      return (\n        <Redirect\n          to={{\n            pathname: \"/login\",\n            state: { from: location },\n          }}\n        />\n      );\n    }\n\n    // If the user is logged in, show the dashboard\n    const userData = JSON.stringify(Userfront.user, null, 2);\n    console.log('userData',Userfront)\n    return (\n      <div>\n        <h2>Dashboard</h2>\n        <pre>{userData}</pre>\n        <button onClick={Userfront.logout}>Logout</button>\n      </div>\n    );\n  }\n\n  return <Route render={renderFn} />;\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}